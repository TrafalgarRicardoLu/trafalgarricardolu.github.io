<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator>
  <link href="http://localhost:4000/tag/essay/feed.xml" rel="self" type="application/atom+xml" />
  <link href="http://localhost:4000/" rel="alternate" type="text/html" />
  <updated>2021-02-13T22:30:21+08:00</updated>
  <id>http://localhost:4000/tag/essay/feed.xml</id>

  
  
  

  
    <title type="html">Ghost | </title>
  

  
    <subtitle>The professional publishing platform</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">我的2020</title>
      <link href="http://localhost:4000/%E6%88%91%E7%9A%842020" rel="alternate" type="text/html" title="我的2020" />
      <published>2021-02-13T18:00:00+08:00</published>
      <updated>2021-02-13T18:00:00+08:00</updated>
      <id>http://localhost:4000/%E6%88%91%E7%9A%842020</id>
      <content type="html" xml:base="http://localhost:4000/%E6%88%91%E7%9A%842020">&lt;h1 id=&quot;我的2020&quot;&gt;我的2020&lt;/h1&gt;

&lt;p&gt;转眼又是农历新年，家家户户辞旧迎新。在年交之时，总结过去，展望未来，这是去年我给自己定下的目标。不过，去年有个漫长的暑假，于是又给自己的研究生生涯做了计划。这样一来，年更的总结反倒像是半年更的了。&lt;/p&gt;

&lt;p&gt;虽然说是2020年的年度总结，但说实话，我对毕业之前在学校待过的匆匆一月也没有太多印象。记得的事也不过是提交实习项目报告和毕业设计两件事。实习报告由于疫情直接变成了自选项目报告，拿了个以前写的Todo List当模板，写了下实现的思路就交上去了。毕业设计则相当地水，然后我在演示的时候竟然出现了Bug，幸好老师不追究，也就匆匆水过。但是那个Bug其实也就是一行代码的关系，事后稍作修改，也就过了。&lt;/p&gt;

&lt;p&gt;毕业之后是漫长的暑假。暑假的前一个月，我隔天交叉学习MIT6.824和SICP。6.824实在让我受益匪浅，作为分布式的课程实在是再合适不过。而SICP则似乎名不符实，知乎上盛赞其是程序员的内功，毫不吝啬溢美之词。然而，学完以后我只觉得这门课的价值并没有那么高。这门课中提及的模块化的抽象，黑盒以及流式计算等概念实在太过经典，以至于每一个计算机专业的学生都不可能没有听过，因此再花费一些时间去重新学习用Lisp怎么表达和处理这些概念实在有些浪费。正如在&lt;a href=&quot;https://segmentfault.com/a/1190000005064958&quot;&gt;《MIT为何停掉SICP》&lt;/a&gt;中提到的“Sussman 指出，现代的软件工程师们的主要工作是为那些他们并不完全理解的复杂的硬件（由于商业机密的缘故，也不可能理解）而写代码。软件层面也存在同样的情况，编程环境是由无所不能的巨大的程序库构成”，SICP的所教授的知识更像是用来独立编写一个模块或者是开发整个软件所需要的知识，而现代分工过于细化和追求商业利益优先而进行的敏捷开发则与其背道而驰。不过，我依旧不能否认当我发现Lisp可以用两个操作写出自己解释器时的赞叹之情。&lt;/p&gt;

&lt;p&gt;九月份正式报到，算是开启了研究生生涯（虽然有点水）。流水账地回顾一下这半年的生活。九月份已经大致明确了将来要做的方向，要么分布式数据库，要么后台开发。因为6.824的余毒未清，所以九月份都在看一些额外的论文，Dynamo之类的。所以十月份主要在看CMU15-445的视频，给数据库打个底子并且写相关的课程作业。十一月份则是读《数据库系统概念》，再把MIT6.824的作业认认真真地做完。十二月读了交大出的《现代操作系统》，也读了一些RocksDB的源码。一月份的前一个星期和后一个星期在做TinyKV，而中间两个星期由于考试的缘故，在疯狂划水。&lt;/p&gt;

&lt;p&gt;这几个月的学习，也基本是让我决定了走上分布式数据库的道路。&lt;/p&gt;

&lt;p&gt;回忆起来，其实每个月的学习还算Solid，这些东西写简历上去找一个不那么好的实习也够用了。但是半年的时间实在是太紧了，分布式的基础理论刚刚入门，数据库的知识也仅仅是了解了个大纲，与这两者相关的计算机网络和操作系统都没有针对性地深入地了解。这些基础知识都只局限于408的范围，如果想要真正在这个方向走下去，必须要有能力修改底层的Linux源码或者自定义通信协议。&lt;/p&gt;

&lt;p&gt;不过，值得庆幸的是，我对于Raft算法已经有了一定的理解，至少所有关于Raft的问题，我都有信心答上来。另外，数据库的事务的隔离级别和实现，我也有一套可以自圆其说的理解。但是对于SQL Plan的生成，SQL的执行都还有从理论到实践的距离，毕竟14-445的实验实在算不上有工业级的质量。&lt;/p&gt;

&lt;p&gt;这里不妨结合我对分布式数据库的理解，做一个简单的知识梳理。分布式数据库有两大块的知识，分布式和数据库，其中分布式的通信涉及计算机网络，数据库的优化涉及操作系统，正如我上面说的，这两块知识是我必须补齐的。分布式数据库和单机的数据库区别在于两点，一：单机的数据库存储数据具有上限，所以必须将一张表的数据Split到两台机器，这一块负责的是拓展性，可以用Shard做到，二：由于大多数服务需要很强的可用性，所以分布式的数据库还需要提供备份的功能，这一块负责的是可用性，可以用Replica做到。在Shard时，我们要考虑单机数据库事务的ACID的要求，其中，Isolation和Atomic有别于单机数据库。其他的两个概念，Consistency本来就是不准确的概念，需要通过其他三个来保证，Duration和单机一样，都是用WAL来实现的。Atomic其实就是要求一个事务要么在所有机器上都执行，要么都不执行，一般使用2PC来解决这个问题。Isolation在单机中三种实现方案，2PL，TO和OCC，貌似被使用的只有2PL和OCC。这里也对应两种方案，Percolator使用2PL加2PC来解决A和I，Omid使用OCC加2PC来实现A和I。而Replica则比较简单，只需要在一个Group里执行Raft或者Paxos算法就可以了。另外，在读取完需要的数据以后还要执行的Join或者Count等操作就要设计分布式计算的内容，这一块实在不太了解。其他的数据库内容，比如底层使用以LSM Tree为结构的KV存储还是参照传统数据库使用Page的存储都可以视为单机的问题。&lt;/p&gt;

&lt;p&gt;最后一部分是对未来的展望和计划。&lt;/p&gt;

&lt;p&gt;首当其冲的是表达能力，这么多次面试下来，最大的感觉就是不能将自己学的东西表达出来，并不是不会，而是开始面试以后说话不会深思熟虑，只想更快地回答问题。自我反思以后感觉有两个问题，第一个是心态问题：其实说句自大的话，我自己应该至少是华为保底的，那么大可不必那么害怕失败，面试本质是一个技术交流的场景，在这个场景里不会的就说不会，会的就尽可能地吹起来，不应该有太多的心理负担；第二个是对知识的梳理不够清晰，简历的东西其实都在我自己的脑子里，无非是记得清楚不清楚的问题，但是只有把所有的东西都清楚的梳理一遍，才能在说出来的时候有条理，有自信。我想对于这两点的解决方案是预设一些问题，然后反复地练习怎么回答，最后才能达到想要的状态。&lt;/p&gt;

&lt;p&gt;先讲一讲离得近的计划——实习。目前直投了阿里的提前批，后面至少要投华为，微软，阿里，字节这几家，所以一个合理的顺序是必要的。我准备是按照华为，阿里，字节的顺序投，不写微软是因为微软的面试内容只有算法，和其他的没什么关系，不构成攒经验的说法，然后在华为和阿里中间应该还要加几家一般的公司。期望的目标是，希望能在微软先做几个月，然后到明年的三月份再去字节或者阿里实习。这么考虑是因为微软的实习比较轻松也比较近，所以能够有比较长的时间带薪自习，去了解数据库相关内容的实现，Linux源码和计算机网络，再学习一下C++的知识，最好能够看到Azure内部的文档，学习一下他们分布式数据库的实现。最后，准备充分以后再去面试大厂的核心数据库部门，开启第二段实习，实习到九月份转正，十二月毕业就能直接入职。&lt;/p&gt;

&lt;p&gt;最后再聊一聊开源项目和GSoC。去年也说了，希望今年能够申请一个GSoC的项目，在给TinyKV提交过两个Pull Request以后，大概能了解到开源项目需要怎么样的贡献，另外，在学习分布式数据库的过程中也了解到很多的新技术，希望能把Proposal写得漂亮，详实一点，最好能申请到和数据库相关的工作。如果真的能够申请下来，那么这无疑是简历上的巨大两点。在开源项目方面，我非常看好PingCAP的前景。随着信息化程度加深，需要存储的数据指数级别增加，开源数据库必然是大势所趋，大厂有能力自己研发，小厂只能寻求开源的解决方案，MySQL的方案实在不够优雅，PingCAP的HTAP相当诱人。另外，我认为他们做Share-Nothing的结构也是出于小厂没有能力搭建分布式文件系统的考虑。如果能去PingCAP实习，也不失为一个好选择。&lt;/p&gt;

&lt;p&gt;回顾去年，最大的收获是发现了自己过去四年都在白混，如果能在本科四年确定要学的东西并且认真学下去，那我应该能找到一份不错的工作。但是现在也算是因祸得福，虽说也不知道算不算福气，走上了分布式数据库的道路，如果能在这条路上走下去，应该能成为核心团队的成员，35岁危机也小一些。现在，我总算是知道了要学什么——分布式数据库，怎么学——看国外公开课，做作业，参与开源，希望我能在这条路上好好走下去。&lt;/p&gt;

&lt;p&gt;最后的最后，祝我自己找到一份不错的实习，拿到GSoC的项目，学习未知的知识时能够融会贯通，走在历史的进程上。&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Trafalgar Ricardo Lu</name>
        
        
      </author>

      

      
        <category term="essay" />
      

      
        <summary type="html">转眼又是农历新年，家家户户辞旧迎新。在年交之时，总结过去，展望未来，这是去年我给自己定下的目标。</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">写在研究生生活开始之前</title>
      <link href="http://localhost:4000/%E5%86%99%E5%9C%A8%E7%A0%94%E7%A9%B6%E7%94%9F%E7%94%9F%E6%B4%BB%E5%BC%80%E5%A7%8B%E4%B9%8B%E5%89%8D" rel="alternate" type="text/html" title="写在研究生生活开始之前" />
      <published>2020-02-04T18:18:00+08:00</published>
      <updated>2020-02-04T18:18:00+08:00</updated>
      <id>http://localhost:4000/%E5%86%99%E5%9C%A8%E7%A0%94%E7%A9%B6%E7%94%9F%E7%94%9F%E6%B4%BB%E5%BC%80%E5%A7%8B%E4%B9%8B%E5%89%8D</id>
      <content type="html" xml:base="http://localhost:4000/%E5%86%99%E5%9C%A8%E7%A0%94%E7%A9%B6%E7%94%9F%E7%94%9F%E6%B4%BB%E5%BC%80%E5%A7%8B%E4%B9%8B%E5%89%8D">&lt;p&gt;本来是准备把GitPage作为技术博客来使用的，所以第二篇本该是技术相关的文章。但是想想Spring、MyBatis之类的Web框架也没什么东西好写，Paxos和Raft还没吃透，写不出好东西。又正值大学毕业和研究生生活开始之前的暑假，不如就来写写对未来的一些展望和规划。&lt;/p&gt;

&lt;p&gt;之前看到过一篇文章，里面说要想一想自己希望在简历上写哪些东西，然后做出一份期望的简历，再根据这份简历上的知识点去学习相关的东西。大三找实习的时候对这种说法很是不以为意，但是现在却觉得很是受用。可能主要是因为大三时眼界很局限，只有传统的SSM框架的知识，分布式，云计算和一些业界有名的解决方案都不是很了解，简历上可写的东西屈指可数，现在恰恰相反，前一段时间开始学MIT6.824的东西，又开始在Github上了解一些新潮的项目，逐渐地将眼界拓宽，明白需要学的东西还很多。我将这份期望简历分为两部分，一是个人的项目经历，二是掌握的技能，其中个人经历准备写四个部分，给开源项目做贡献，GSoC的项目，第一段实习和第二段实习，掌握的技能则包括Java Web和分布式存储两块来写。&lt;/p&gt;

&lt;p&gt;2020年的整个七月份，我准备按计划完成6.824的全部课程，包括阅读相关论文并完成所有的实验，还要看完SICP的课程视频以及阅读《Effective Java》，充实地读过这个月。八月份我决定用来阅读Spring，MyBatis和Dubbo的源码，并着手完成第一个项目经历，即提交具有相当质量的Pull Request给一个或几个开源项目。从目前看起来，用Java实现的开源项目并不多，大部分是用于后端的解决方案，给这些项目做贡献有一定的难度，然而我认为与其给与方向无关的项目提交代码，在简历给自己挖坑，不如花多一些时间给有一定体量的项目作贡献，到面试时吹起来也方便一些。&lt;/p&gt;

&lt;p&gt;科软的研究生学制是2.5年，第一年主要是上课，第二年则是一整年的实习，最后半年准备毕业论文。虽然看起来有一年时间准备实习面试，但第二年的实习实际上以暑期实习作为开始，而暑期实习的面试在春招进行，也就是当年的三四月份。这就意味着，研一上的寒假结束就要参加春招，哪怕从现在开始计算也就只有八个月的时间了。由于上述的暑假安排，我准备将实习面试的准备推到开学以后展开，其中主要有两项工作，一是刷LeetCode，二是准备相关的基础知识。由于字节跳动带节奏，所有大厂都喜欢在面试里加一道算法题，今年面腾讯的时候来了四道算法题，华为前两面都有算法题，又听说阿里要在面试里算法题，而如果想要去微软谷歌，也只有做题一条路。不过，如果算法题做得出彩，面试确实能加分不少。所以刷一刷LeetCode恐怕是必不可少的工作。而相关的基础知识的积累就需要阅读常用框架的源码，琢磨开发人员为什么要这么写，然后把这些零散的知识整理成体系，这样无论是面试吹水还是记忆知识都要更舒服一些。&lt;/p&gt;

&lt;p&gt;研一的寒假除了上述的两件事外还要准备一下GSoC的申请，前两次都没成功，就再试一次。有了前两次的经验，这次的proposal写起来可能会更快一些，另外，在写完毕业论文后，在行文的布局上可能会有一些帮助，但是关键仍在于能否解决项目的问题，并且把解决方案阐述清楚，这不仅需要技术水平，阅读代码的能力还需要一些英语的书面表达能力。当然，我个人现在对GSoC不再有执念了，能申请上固然很好，如果不行，也就算了。&lt;/p&gt;

&lt;p&gt;对于实习公司的选择，考虑外企和国内企业，实习地点在国外还是国内，其中外企&amp;gt;私企，国外&amp;gt;国内。之前在知乎上看了关于谷歌日本的介绍，很是向往，毕竟日本没有996也没有恐怖的房价，但是出国的难度实在不小，而谷歌难度就更大了，于是放弃了这个念头，转向国内的公司。国内外企仍是好于土著公司的，微软、谷歌虽然给的工资不多，但胜在不996也没有35岁强制辞退的制度，可以很安稳地过日子，如果有需要甚至能走内部通道转到其他国家的分部。而国内公司给的工资相当地多，阿里，腾讯甚至华为都能在三年后给出30w-50w不等的待遇，能拿到这种待遇其实房子的问题已经解决了一半，但是996和35岁仍是悬在程序员头上的达利克摩斯之剑。因为有一整年的实习时间，而其中一段实习经历必须要呆满七个月，所以初步的计划是能去微软之类的外企做一段时间，毕竟微软苏州离科软宿舍相当近，接下来希望能够去国内的头部公司，阿里，字节之类的实习一段时间，充分体验过两种的工作节奏，再做打算。不过，无论是上述的哪一家公司，想要进去都十分不容易。&lt;/p&gt;

&lt;p&gt;以上的计划和经历已经能够很好地写满简历的个人经历部分，这样的简历不说顶级也是一流的。相交之下，个人技能的介绍反而显得无关紧要，无非是一些技术的罗列，如果能充分阅读相关工具的源码和论文，讲起东西来也不会有多大问题。&lt;/p&gt;

&lt;p&gt;在上一篇文章中，我对能否考上研究生这个问题持否定的态度，其实是由于初试分不怎么高，但谁又能想到我复试竟然排第六呢？！上一篇文章吐槽了创新实践这门课，但恰恰是这门课看过的论文让我有机会在复试中吹出学术感来，加上四级600分，意外地拿了高分。以前觉得985不过更加厉害一些，但是真正得到这个名头之后才知道别人常说的“更大的平台”是什么意思。985+硕士意味着考公的门槛基本不存在，意味着移民条款中瞬间符合许多要求，意味着简历不可能再被卡住等等，这个平台确实相当地大。&lt;/p&gt;

&lt;p&gt;《新华字典》里有句话：“张华考上了北京大学，在化学系学习；李萍进了中等技术学校，读机械制造专业；我在百货公司当售货员：我们都有光明的前途。”&lt;/p&gt;

&lt;p&gt;希望我也能有光明的前途。&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Trafalgar Ricardo Lu</name>
        
        
      </author>

      

      
        <category term="essay" />
      

      
        <summary type="html">本来是准备把GitPage作为技术博客来使用的，所以第二篇本该是技术相关的文章。但是想想Spring、MyBatis之类的Web框架也没什么东西好写，Paxos和Raft还没吃透，写不出好东西。又正值大学毕业和研究生生活开始之前的暑假，不如就来写写对未来的一些展望和规划。</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">我的2019</title>
      <link href="http://localhost:4000/%E6%88%91%E7%9A%842019" rel="alternate" type="text/html" title="我的2019" />
      <published>2020-02-04T18:18:00+08:00</published>
      <updated>2020-02-04T18:18:00+08:00</updated>
      <id>http://localhost:4000/%E6%88%91%E7%9A%842019</id>
      <content type="html" xml:base="http://localhost:4000/%E6%88%91%E7%9A%842019">&lt;p&gt;​2019悄然而过，过去的一年，大大小小事情许多，而站在2020回望，似乎除了考研，与我有关的，实在不多。适逢新型冠状病毒肆虐，诸事皆歇，得空搭起博客，也算整理千万思绪，展望一下迷茫的未来。&lt;/p&gt;

&lt;h2 id=&quot;考研&quot;&gt;考研&lt;/h2&gt;

&lt;p&gt;​考研的复习始于面试受挫，这么说恐怕不对，因为真正的面试甚至都还没开始。看到牛客网上的面经，拿到大厂offer的兄弟几乎都是985或是211的硕士。面试的主要知识点说不上多么深入，无非是老生常谈的那几本书，那几个知识点，但是，要谈项目经验的话，我实在是没有能拿得出手的的东西，倘若硬要尝试大厂，恐怕只会撞得头破血流。再以本科杭电的身份自处，两相比较，最终还是选择的考研。现在回头想想，哪里会有公司要求一个大三的学生有光鲜亮丽的实际项目？然而话又说回来，现在无论是BAT还是公职单位，没有硕士的文凭，上升空间实在是小之又小，几乎埋下了35岁被清理的引子。当然强的不像话的我们另说，比说A校CM队的同学，有拿到阿里，微软实习的，有保研浙大的，实在不是能够与之同台竞技。&lt;/p&gt;

&lt;p&gt;​复习过程乏善可陈，大约与996无异。早上八点半起床，九点到图书馆，复习两个半小时，中午十一点半去吃饭，小睡一会，下午一点半起床去图书馆，复习到五点钟，吃完晚饭，去寝室休息到六点左右出门，到图书馆复习到九点或九点半，然后结束一天复习，回寝室准备睡觉。平心而论，我的复习时间不算长，但效率要比绝大多数人强上不少，几乎不停笔，算是复习卓有成效，可惜天不如人愿。&lt;/p&gt;

&lt;p&gt;​值得一提的，是九月中旬考研报名。在浙大和中科大犹豫不决。本来是首选浙大计算机，但是，实在是太难了。清北的计算机自主命题，严格控制分数线，所以公认最难，而浙大则是公版的数一英一408，但是浙大的分数线之高令人发指，我个人觉得难度几乎与清北齐平。中科大软院招人多，分数低，但是没导师，认可度没浙大高，虽然难度比浙大低一档，但是考上后的加成也要低一档。马克思说要结合实际，具体问题具体分析，还是得看自身情况呀。通过以下四点考虑，我最终选择了中科大的软院：1.上浙大可以说只有一层把握，考不上研究生过去一年的努力就等于白费。2.我准备的方向是后端，做中间件或者分布式，这些方向的学习资源非常丰富，完全可以自学成才。3.没导师确实少了很多帮助，但另一方面，没了导师可以说未来所有时间都是自己的。想做什么方向，想怎么安排生活自主权都在自己手里，或许更适合我。4.科软再菜也是C9呀，虽然不比浙大的牌子响亮，但是比杭电总归要强得多。&lt;/p&gt;

&lt;p&gt;​然而，一切都终结于2019年12月22号上午。数学，我最有自信的一科，炸了，血炸。考到一半的时候，我慌了，犯了大忌，尽力想冷静下来却办不到，那一刻，我的考研就结束了。无论我其他三门怎么发挥，恐怕也难以挽回这科的劣势，甚至于单科线都很难过。刚刚查了文件，大概还有十天出分，希望渺茫，虽然一路走来早已做好了最坏的打算，但八个月的努力白费总归是意难平。&lt;/p&gt;

&lt;p&gt;​只能是尽人事，听天命。&lt;/p&gt;

&lt;h2 id=&quot;创新实践&quot;&gt;创新实践&lt;/h2&gt;

&lt;p&gt;​这门课实在是麻烦得要命。但总归能学到一些东西。&lt;/p&gt;

&lt;p&gt;​大学所谓的teamwork其实是solo-teamwork，大学四年，除了一门课的teamwork划水划过去，其他的我几乎都干了70%以上的事。有趣的是，我那一次的划水竟然被大佬喷了，虽然能体会那位大佬的干了90%的活的心情，可是当时我等了一个半个小时也等不到回复信息，以为没有问题就睡觉了，结果被喷就难受了。言归正传，这次teamwork我干的活大概也在90%左右，10次ppt，8篇paper的资料，实验重现几乎一力完成，但是付出总是有回报的。大学里，同学间，师生间大多留点情面，但是毕业了，遇到这种事却不能马马虎虎，多带一个名字就过去了。这就要说到展现自我的能力了。&lt;/p&gt;

&lt;p&gt;​以前总认为闷声发大财，是金子总会发光的。但现在看来，发大财的时候肯定是不能到处讲的，免得遭人嫉妒，而后者则是所谓怀才不遇的人的自我安慰。到了大学，终于明白信息不对称随处都在，尤其是到了求职的时候。你说你厉害，我怎么信你？总是要拿出一些东西来证明的。挑战杯之类的比赛水吗？水，真的水。但是在面试官眼中，你没有ACM的奖项就算了，但这么水的挑战杯也没有，那岂不是更水吗？简历里什么都没，怎么让人相信你水平高呢？有能力，要展现出来，多参加比赛，拿个小奖，奖不是奖励，是证明，证明你的能力高于同龄人。同理，以后团队工作，要让上级看到自己的工作量，不然别人就要以为你是混日子的。&lt;/p&gt;

&lt;p&gt;​这门课充分锻炼了我的看论文的能力。以前看到全英文，很容易怀疑人生，感觉看完几乎是不可能的任务。但是这么多论文看下来，终于养成了看论文的能力，现在总算能拿到论文不慌，知道重点在哪些段落，哪些细节需要注意，把论文从头到尾看完，还能再做一个报告。这个能力我以后应该是要受用无穷的。但是，前几天找的分布式存储的论文还一个字没看呢。&lt;/p&gt;

&lt;p&gt;​这门课暴露的我的一个不足，就是表达能力不行。做汇报的时候，往往会觉得力不从心，懂得说不好，表达不出来，不能很自如地边讲话边思考。以前看演讲，觉得这个不行那个不行，没想到最不行的是我自己。追根溯源，是两点，1.本身对报告的内容不够熟悉，细节掌握的不够充分，没有一个清晰的思路。2.演讲能力的不足，这个不仅仅是需要锻炼，最好有稿子，最不济要有一个大纲，然后要提前准备，反复练习。&lt;/p&gt;

&lt;p&gt;​千言万语，这门课终于结束了，天知道有多push。&lt;/p&gt;

&lt;h2 id=&quot;gsoc&quot;&gt;GSoC&lt;/h2&gt;

&lt;p&gt;​申请两次，被拒两次。那感觉就像是精心准备的表白，被女神无情拒绝。&lt;/p&gt;

&lt;p&gt;​第一次申请时的我实在是too young too naive。我单以为只有我一个人申请就只能给我，没想到还能谁都不给。这次申请的是小组织的小项目，更新下API而已，哪里有什么难度。可惜当时无知，proposal写得跟官话一样，满口空话，实际项目相关压根没写，怕是换了我自己也是要拒绝的。&lt;/p&gt;

&lt;p&gt;​第二次申请的真是大项目呀，阿里的RPC框架Dubbo，要是能给它贡献代码，BAT躺着也能进去了，可惜没拿到。一开始的项目是加一个Consul实现的register，虽然有难度，可是说不上完成不了，花点时间怎么也能写出来。整了大半个月，proposal都快写完了，结果说社区里有人实现了，当时真的傻了。硬着头皮换了项目，用gRPC做RPC的第三方协议，看着很合理，写起来完全的另一回事。gRPC的API和dubbo的思路完全不同，最后还得回到Netty上，我真没研究过Netty。也知道多半是申不上的，但还是磕磕绊绊交了proposal。当然，没过。&lt;/p&gt;

&lt;p&gt;​话虽如此，但还是能学到不少东西的。我学会用Mailing List了，看得懂Apache的issue管理了，能写英文邮件了（直接导致我英文邮件写得比中文顺）。重要的是两点，1.不怕所谓的开源社区和开源项目。其本质就是一帮在世界各地的人，给同一个项目写代码，想参加进来的前提是把与自己相关的代码看懂。2.敢去看大型项目的源码，尝试去理解其用意。之前从没有真正地看过这些项目的代码，但这两次是实实在在地去阅读代码，将其个部分联系起来，并在本地调试。这是程序员进阶的必要技能，这次算是点了一级，来日方长，慢慢升级吧。&lt;/p&gt;

&lt;p&gt;​这三件事算得上我去年最重要的事，都不算圆满，但多少能从中学到一些经验。&lt;/p&gt;

&lt;p&gt;​但愿今年，健康平安，劳有所得。&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>Trafalgar Ricardo Lu</name>
        
        
      </author>

      

      
        <category term="essay" />
      

      
        <summary type="html">2019悄然而过，过去的一年，大大小小事情许多，而站在2020回望，似乎除了考研，与我有关的，实在不多。适逢武汉病毒肆虐，诸事皆歇，得空搭起博客，也算整理千万思绪，展望一下迷茫的未来。</summary>
      

      
      
    </entry>
  
</feed>
